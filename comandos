----------------comandos de reparacion-------------------

En la ventana Símbolo de  Sistema(cmd) ejecutado como administrador, escriba SFC /SCANNOW y presione ENTER
Windows reparara cualquier archivo dañado o perdido que encuentre debe reiniciar una vez terminado el proceso

los siguientes comandos tambien son de reparacion automatica en cmd
DISM /Online /Cleanup-Image /CheckHealth
DISM /Online /Cleanup-Image /ScanHealth
DISM /Online /Cleanup-Image /RestoreHealth

CHKDSK nos permite analizar toda la estructura de datos y reparar cualquier daño que se puedan detectar en un disco duro especifico
Un ejemplo para lanzar este comando y analizar nuestro disco duro es:

chkdsk C: /F /R (la /F y /R siempre deben ir despues del disco elegido) psdta ten en cuenta que este proceso aveces es largo y mientras esta
activo no podras usar algunos programas por que se estaran leyendo sus carpetas

--------------comandos basicos de git--------------------

git init = es para indicar que vamos a empezar a usar git en un proyecto (carpeta) asi pasamos al working directory
git add <file> = es para pasar los archivos del working directory al stage area
git status = es para saber en que area de git esta nuestro proyecto (working directory , stage area , repository)
git commit -m "texto-info" = envia el proye  desde  el staging hasta el repositorio 
git push = es para subirlo a un respositorio remoto por ejemplo a un servidor para que otros desarrolladores puedan trabajar en el proyecto tambien
git pull = es para traer los cambios que han realizado otros desarrolladores 
git clone = es para hacer una copia de un repositorio en algun servidor y pasarlo a tu pc para que puedas trabajarlo
checkout = trae las versiones de la rama del proyecto repositorio (master)
ls = para ver la lista de un directorio
ls  -al = para ver la lista de un directorio con los ocultos
git rm --cached = borra el archivo del staging
git config = muestra todas las configuraciones que tiene git 
git config --list = para ver la configuracion por defecto de git
git config --list --show-origin = para ver donde estan guardadas las configuraciones actuales de git
git config --global user.name "nombre de usuario" = funciona para designar un nombre de usuario de git
git config --global user.email "email" = funciona para designar un correo 
CAT = para ver el contenido de un archivo 
git add . = para agregar todo lo de la carpeta al staging
git log = muestra todas las modificaciones del proyecto 
git show = muestra todos los cambios de un archivo
scape + shift + zz = para salir de ciertas funciones
git diff +la direccion git de un cambio + la direccion git del otro = funciona para hacer comparaciones de los cambios hechos 
git reset + direccion del git commit + --hard o --soft = esto es para volver a una antigua version de un commit con hard vuelves completamente 
a la version elegida y se borran las que este por delante y con soft vuelve pero el staging sigue siendo la version mas nueva


------------- comandos de utilidad------------------------

pwd =  ubica tu carpeta actual
cd = para navegar entre directorios
mkdir = crea directorios (carpetas)
touch = crea un nuevo documento
history = toda la historia de los comandos ingresados 
!# = para repetir un comando almacenado en history 
rm = remove 
--help = informacion sobre los comandos 


